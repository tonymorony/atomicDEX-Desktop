name: AtomicDex-Desktop CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - master
  schedule:
    - cron: '0 0 * * 1'

jobs:
  
  ci-flow:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        name: [
          ubuntu-qt-5-15-0,
          ubuntu-qt-5-15-1,
          osx-qt-5-15-0,
          osx-qt-5-15-1,
          windows-10-qt-5-15-0,
          windows-10-qt-5-15-1
        ]
    
        include:
            - name: ubuntu-qt-5-15-0
            os: ubuntu-16.04
            qt: '5.15.0'

            - name: ubuntu-qt-5-15-1
            os: ubuntu-16.04
            qt: '5.15.1'

            - name: osx-qt-5-15-0
            os: macos-latest
            qt: '5.15.0'

            - name: osx-qt-5-15-1
            os: macos-latest
            qt: '5.15.1'

            - name: windows-10-qt-5-15-0
            os: windows-latest
            qt: '5.15.0'

            - name: windows-10-qt-5-15-1
            os: windows-latest
            qt: '5.15.1'
    
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: 'true'

      - name: Install QT (Linux)
        if: runner.os == 'Linux'
        uses: KomodoPlatform/install-qt-action@v2
        with:
          version: ${{ matrix.qt }}
          host: 'linux'
          target: 'desktop'
          dir: '${{ github.workspace }}'
          modules: 'qtcharts qtwidgets debug_info'
          aqtversion: '==0.8'
          py7zrversion: '==0.6'

      - name: Install QT (MacOS)
        if: runner.os == 'macOS'
        uses: KomodoPlatform/install-qt-action@v2
        with:
          version: ${{ matrix.qt }}
          host: 'mac'
          target: 'desktop'
          dir: '${{ github.workspace }}'
          modules: 'qtcharts qtwidgets debug_info'

      - name: Install QT (Windows)
        uses: KomodoPlatform/install-qt-action@v2
        with:
          version: ${{ matrix.qt }}
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          dir: 'C:\'
          modules: 'qtcharts qtwidgets debug_info'

      - name: Install deps (Linux)
        env:
          DEBIAN_FRONTEND: noninteractive
        if: runner.os == 'Linux'
        uses: KomodoPlatform/setup-nim-action@v1.0.2
        with:
          nim-version: '1.2.0'
        run: |
          echo ${{ github.sha }}
          sudo apt-get update  # prevents repo404 errors on apt-remove below
          sudo apt-get remove php* msodbcsql17 mysql*
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get upgrade -y

          # base deps
          sudo apt-get install build-essential \
                               libgl1-mesa-dev \
                               ninja-build \
                               curl \
                               wget \
                               software-properties-common \
                               lsb-release \
                               libpulse-dev \
                               libtool \
                               autoconf \
                               unzip \
                               libssl-dev \
                               libxkbcommon-x11-0 \
                               libxcb-icccm4 \
                               libxcb-image0 \
                               libxcb1-dev \
                               libxcb-keysyms1-dev \
                               libxcb-render-util0-dev \
                               libxcb-xinerama0 \
                               libgstreamer-plugins-base1.0-dev \
                               git -y


          # get llvm
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 10

          # set clang version
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-10 777
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-10 777

          # set gnu compilers version
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 777
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 777

          sudo apt-get update
          sudo apt-get install libc++abi-10-dev libc++-10-dev -y

          export CXXFLAGS=-stdlib=libc++
          export LDFLAGS=-stdlib=libc++
          export CXX=clang++-10
          export CC=clang-10

          # get right cmake version
          wget https://github.com/Kitware/CMake/releases/download/v3.17.3/cmake-3.17.3-Linux-x86_64.tar.gz
          tar xvf cmake-3.17.3-Linux-x86_64.tar.gz
          cd cmake-3.17.3-Linux-x86_64
          sudo cp -r * /usr/
          sudo cp -r * /usr/local/
          cmake --version

          # get libwally
          git clone https://github.com/KomodoPlatform/libwally-core.git
          cd libwally-core
          ./tools/autogen.sh
          ./configure --disable-shared
          sudo make -j3 install
          cd ..

      - name: prepare build (Linux)
        if: runner.os == 'Linux'
        run: |
         # duplicating because got suspicion that update-alternatives doesnt save between steps

          # set clang version
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-10 777
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-10 777

          # set gnu compilers version
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 777
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 777

      - name: vcpkg deps (Linux)
        if: runner.os == 'Linux'
        env: # Or as an environment variable
          CXXFLAGS: -stdlib=libc++
          LDFLAGS: -stdlib=libc++
          CXX: clang++-10
          CC: clang-10
        uses: KomodoPlatform/run-vcpkg@v3
        with:
          vcpkgArguments: '@${{ github.workspace }}/.github/workflows/linux_response_file.txt'
          vcpkgDirectory: '${{ github.workspace }}/ci_tools_atomic_dex/vcpkg-repo'
          appendedCacheKey: ${{ hashFiles('.github/workflows/linux_response_file.txt') }}

      - name: Install deps (MacOS)
        if: runner.os == 'macOS'
        run: |
          brew install autoconf \
                       automake \
                       libtool \
                       pkgconfig \
                       wget \
                       nim \
                       cmake \
                       ninja \
                       git \
                       boost \
                       gcc \
                       gnu-sed \
                       llvm@9

          export CC=/usr/local/opt/llvm@9/bin/clang

          # get curl
          git clone https://github.com/curl/curl.git
          cd curl
          git checkout curl-7_70_0
          ./buildconf
          ./configure --disable-shared --enable-static --without-libidn2 --without-ssl --without-nghttp2 --disable-ldap --with-darwinssl
          make -j3 install
          cd ../

          git clone https://github.com/KomodoPlatform/libwally-core.git
          cd libwally-core
          ./tools/autogen.sh
          ./configure --disable-shared
          sudo make -j3 install
          cd ..

          # get SDKs 
          git clone https://github.com/phracker/MacOSX-SDKs $HOME/sdk

      - name: vcpkg deps (MacOS)
        if: runner.os == 'macOS'
        env: # Or as an environment variable
          CXX: /usr/local/opt/llvm@9/bin/clang++
          CC: /usr/local/opt/llvm@9/bin/clang
        uses: KomodoPlatform/run-vcpkg@v3
        with:
          vcpkgArguments: '@${{ github.workspace }}/.github/workflows/osx_response_file.txt'
          vcpkgDirectory: '${{ github.workspace }}/ci_tools_atomic_dex/vcpkg-repo'
          appendedCacheKey: ${{ hashFiles('.github/workflows/osx_response_file.txt') }}

      - name: vcpkg deps (Windows)
        if: runner.os == 'Windows'
        uses: KomodoPlatform/run-vcpkg@v3
        with:
          vcpkgArguments: '@${{ github.workspace }}/.github/workflows/windows_response_file.txt'
          vcpkgDirectory: '${{ github.workspace }}/ci_tools_atomic_dex/vcpkg-repo'
          appendedCacheKey: ${{ hashFiles('.github/workflows/windows_response_file.txt') }}

      - name: Build AtomicDEX (Linux)
        if: runner.os == 'Linux'
        run: |
          export QT_INSTALL_CMAKE_PATH=${{ github.workspace }}/Qt/5.15.0/gcc_64/lib/cmake
          export QT_ROOT=${{ github.workspace }}/Qt/5.15.0
          export PATH=${{ github.workspace }}/Qt/5.15.0/gcc_64/bin:$PATH
          export PATH=$HOME/.nimble/bin:$PATH
          export CXXFLAGS=-stdlib=libc++
          export LDFLAGS=-stdlib=libc++
          export CXX=clang++-10
          export CC=clang-10
          cd ci_tools_atomic_dex
          nimble build -y

          ./ci_tools_atomic_dex build release
          ./ci_tools_atomic_dex bundle release

      - name: Build AtomicDEX (MacOS)
        if: runner.os == 'macOS'
        run: |
          export QT_INSTALL_CMAKE_PATH=${{ github.workspace }}/Qt/5.15.0/clang_64/lib/cmake
          export QT_ROOT=${{ github.workspace }}/Qt/5.15.0
          cd ci_tools_atomic_dex
          nimble build -y
          ./ci_tools_atomic_dex bundle release --osx_sdk=$HOME/sdk/MacOSX10.13.sdk --compiler=/usr/local/opt/llvm@9/bin/clang++
          ls bundle-Release/atomicdex-desktop.dmg

      - name: Build AtomicDEX (Windows)
        shell: powershell
        run: |
          Set-ExecutionPolicy RemoteSigned -scope CurrentUser
          
          $DWFILE = ($PWD | select -exp Path) + '\nim-1.2.6.zip'
          (New-Object System.Net.WebClient).DownloadFile('https://github.com/KomodoPlatform/nim_kmd_package_list/raw/master/nim-1.2.6_x64.zip', $DWFILE)
          $DWFOLDER = ($PWD | select -exp Path)
          Expand-Archive -LiteralPath $DWFILE -DestinationPath $DWFOLDER
          $ENV:PATH=$ENV:PATH+';'+($PWD | select -exp Path)+'\nim-1.2.6\bin;'+$ENV:UserProfile+'.nimble\bin'
          & $DWFOLDER\nim-1.2.6\finish.exe -y
          
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          scoop install llvm --global
          scoop install ninja --global
          scoop install cmake --global
          scoop install git --global
          scoop install 7zip  --global

          scoop cache rm 7zip
          scoop cache rm git
          scoop cache rm cmake
          scoop cache rm ninja
          scoop cache rm llvm
          scoop cache rm nim

          $Env:QT_INSTALL_CMAKE_PATH = "C:\Qt\5.15.0\msvc2019_64"

          cd ci_tools_atomic_dex

          $file = 'src\generate.nim'
          $regex = '(?<=g_vcpkg_cmake_script_path & ")[^"]*'
          (Get-Content $file) -replace $regex, ' -DVCPKG_TARGET_TRIPLET=x64-windows ' | Set-Content $file
          nimble build -y

          cmd /c '.\ci_tools_atomic_dex.exe build release 2>&1'
          cmd /c '.\ci_tools_atomic_dex.exe bundle release 2>&1'
          ls bundle-Release/bundle.zip

      - name: Running Tests (Linux)
        env: # Or as an environment variable
          REPORT_CI_TOKEN: ${{ secrets.REPORT_CI_TOKEN_SECRET }}
        working-directory: ci_tools_atomic_dex
        if: runner.os == 'Linux'
        run: |
          export QT_INSTALL_CMAKE_PATH=${{ github.workspace }}/Qt/5.15.0/gcc_64/lib/cmake
          export QT_ROOT=${{ github.workspace }}/Qt/5.15.0
          export PATH=${{ github.workspace }}/Qt/5.15.0/gcc_64/bin:$PATH
          export PATH=$HOME/.nimble/bin:$PATH
          export CXXFLAGS=-stdlib=libc++
          export LDFLAGS=-stdlib=libc++
          export CXX=clang++-10
          export CC=clang-10
          echo "Running tests"
          ./ci_tools_atomic_dex tests release
          cd build-Release/bin/AntaraAtomicDexTestsAppDir/usr/bin
          cat atomic-dex-tests-result.xml
          curl https://report.ci/upload.py --output upload.py
          ls
          python upload.py --sha `git rev-parse HEAD` -n "[Doctest Linux]" --include='atomic-dex-tests-result.xml' --framework=doctest --merge ".*"
          echo "Uploading tests on Linux finished"

      - name: Running Tests (MacOS)
        env: # Or as an environment variable
          REPORT_CI_TOKEN: ${{ secrets.REPORT_CI_TOKEN_SECRET }}
        working-directory: ci_tools_atomic_dex
        run: |
          export QT_INSTALL_CMAKE_PATH=${{ github.workspace }}/Qt/5.15.0/clang_64/lib/cmake
          export QT_ROOT=${{ github.workspace }}/Qt/5.15.0
          echo "Running tests"
          ./ci_tools_atomic_dex tests release
          cd build-Release/bin/atomicdex-desktop_tests.app/Contents/MacOS
          cat atomic-dex-tests-result.xml
          curl https://report.ci/upload.py --output upload.py
          ls
          python upload.py --sha `git rev-parse HEAD` -n "[Doctest MacOS]" --include='atomic-dex-tests-result.xml' --framework=doctest --merge ".*"
          echo "Uploading tests on OSX finished"

      - name: Running Tests (Windows)
        shell: powershell
        env: # Or as an environment variable
          REPORT_CI_TOKEN: ${{ secrets.REPORT_CI_TOKEN_SECRET }}
        working-directory: ci_tools_atomic_dex
        run: |
          echo "Running tests"
          $Env:QT_INSTALL_CMAKE_PATH = "C:\Qt\5.15.0\msvc2019_64"
          cmd /c '.\ci_tools_atomic_dex.exe tests release 2>&1'
          cd build-Release
          cd bin
          ls
          Invoke-WebRequest -Uri https://report.ci/upload.py -OutFile upload.py
          python upload.py --sha $(git rev-parse HEAD) -n "[Doctest Windows]" --include='atomic-dex-tests-result.xml' --framework=doctest --merge ".*"

      - name: Upload bundle artifact (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.name }}-release.tar.gz
          path: ./ci_tools_atomic_dex/bundle-Release/AntaraAtomicDexAppDir.tar.gz

      - name: Upload artifacts (MacOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.name }}-release.dmg
          path: ./ci_tools_atomic_dex/bundle-Release/atomicdex-desktop.dmg

      - name: Upload artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.name }}-release.zip
          path: ./ci_tools_atomic_dex/bundle-Release/bundle.zip
